complete_hector_emissions
# Format the data
out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value))
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
d
# # Error check -- will add later
#
# # The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
# expected_years <- data.table(year = 2005:2100)
#
# # Construct a df of all the variable for all 2005-2100. This will create a df with NAs when no GCAM emissions
# # are available - this data will be filled-in in the following step.
# save_cols <- names(d)[!names(d) %in% c("year", "value")]
# to_replicate <- distinct(d [, ..save_cols])
# df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
# df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
#
# # Replace the NA emissions with linearly interpolated values
# split(x = df_NA,
#       f = interaction(df_NA$hector.name, df_NA$scenario, df_NA$hector.units, drop = T)) %>%
#   lapply(function(x) {
#     new_vals <- na.approx(object = x$value, x = x$year)
#     x$value <- new_vals
#     return(x)
#   }) %>%
#   rbindlist ->
#   complete_hector_emissions
#
# # Format the data
# out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
#
# out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
d
# # Error check -- will add later
#
# # The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
# expected_years <- data.table(year = 2005:2100)
#
# # Construct a df of all the variable for all 2005-2100. This will create a df with NAs when no GCAM emissions
# # are available - this data will be filled-in in the following step.
# save_cols <- names(d)[!names(d) %in% c("year", "value")]
# to_replicate <- distinct(d [, ..save_cols])
# df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
# df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
#
# # Replace the NA emissions with linearly interpolated values
# split(x = df_NA,
#       f = interaction(df_NA$hector.name, df_NA$scenario, df_NA$hector.units, drop = T)) %>%
#   lapply(function(x) {
#     new_vals <- na.approx(object = x$value, x = x$year)
#     x$value <- new_vals
#     return(x)
#   }) %>%
#   rbindlist ->
#   complete_hector_emissions
#
# # Format the data
# out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
#
# out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
d
# # Error check -- will add later
#
# # The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
# expected_years <- data.table(year = 2005:2100)
#
# # Construct a df of all the variable for all 2005-2100. This will create a df with NAs when no GCAM emissions
# # are available - this data will be filled-in in the following step.
# save_cols <- names(d)[!names(d) %in% c("year", "value")]
# to_replicate <- distinct(d [, ..save_cols])
# df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
# df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
#
# # Replace the NA emissions with linearly interpolated values
# split(x = df_NA,
#       f = interaction(df_NA$hector.name, df_NA$scenario, df_NA$hector.units, drop = T)) %>%
#   lapply(function(x) {
#     new_vals <- na.approx(object = x$value, x = x$year)
#     x$value <- new_vals
#     return(x)
#   }) %>%
#   rbindlist ->
#   complete_hector_emissions
#
# # Format the data
# out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
#
# out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
View(gcam_emissions_df)
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
# Error check -- will add later
# The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
expected_years <- data.table(year = 2005:2100)
# Construct a df of all the variable for 2005-2100. This will create a df with NAs when no GCAM emissions
# are available - this data will be filled-in in the following step.
save_cols <- names(d)[!names(d) %in% c("year", "value")]
to_replicate <- distinct(d [, ..save_cols])
df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
df_NA
# # Replace the NA emissions with linearly interpolated values
# split(x = df_NA,
#       f = interaction(df_NA$hector.name, df_NA$scenario, df_NA$hector.units, drop = T)) %>%
#   lapply(function(x) {
#     new_vals <- na.approx(object = x$value, x = x$year)
#     x$value <- new_vals
#     return(x)
#   }) %>%
#   rbindlist ->
#   complete_hector_emissions
#
# # Format the data
# out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
#
# out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
View(gcam_emissions_df)
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
# Error check -- will add later
# The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
expected_years <- data.table(year = 2005:2100)
# Construct a df of all the variable for 2005-2100. This will create a df with NAs when no GCAM emissions
# are available - this data will be filled-in in the following step.
save_cols <- names(d)[!names(d) %in% c("year", "value")]
to_replicate <- distinct(d [, ..save_cols])
df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
df_NA
# Replace the NA emissions with linearly interpolated values
df_list <- split(
x = df_NA,
f = interaction(df_NA$hector.name, df_NA$scenario, df_NA$hector.units, drop = T))
df_list
# lapply(function(x) {
#   new_vals <- na.approx(object = x$value, x = x$year)
#   x$value <- new_vals
#   return(x)
# }) %>%
#   rbindlist ->
#   complete_hector_emissions
#
# # Format the data
# out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
#
# out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
View(gcam_emissions_df)
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
# Error check -- will add later
# The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
expected_years <- data.table(year = 2005:2100)
# Construct a df of all the variable for 2005-2100. This will create a df with NAs when no GCAM emissions
# are available - this data will be filled-in in the following step.
save_cols <- names(d)[!names(d) %in% c("year", "value")]
to_replicate <- distinct(d [, ..save_cols])
df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
df_NA
# Replace the NA emissions with linearly interpolated values
df_list <- split(
x = df_NA,
f = interaction(df_NA$hector.name, df_NA$hector.units, drop = T))
df_list
# lapply(function(x) {
#   new_vals <- na.approx(object = x$value, x = x$year)
#   x$value <- new_vals
#   return(x)
# }) %>%
#   rbindlist ->
#   complete_hector_emissions
#
# # Format the data
# out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
#
# out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
View(gcam_emissions_df)
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
# Error check -- will add later
# The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
expected_years <- data.table(year = 2005:2100)
# Construct a df of all the variable for 2005-2100. This will create a df with NAs when no GCAM emissions
# are available - this data will be filled-in in the following step.
save_cols <- names(d)[!names(d) %in% c("year", "value")]
to_replicate <- distinct(d [, ..save_cols])
df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
df_NA
# Replace the NA emissions with linearly interpolated values
df_list <- split(
x = df_NA,
f = interaction(df_NA$hector.name, df_NA$hector.units, drop = T))
df_list
lapply(function(x) {
new_vals <- na.approx(object = x$value, x = x$year)
x$value <- new_vals
return(x)
}) %>%
rbindlist ->
complete_hector_emissions
# Format the data
out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
# Error check -- will add later
# The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
expected_years <- data.table(year = 2005:2100)
# Construct a df of all the variable for 2005-2100. This will create a df with NAs when no GCAM emissions
# are available - this data will be filled-in in the following step.
save_cols <- names(d)[!names(d) %in% c("year", "value")]
to_replicate <- distinct(d [, ..save_cols])
df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
df_NA
# Replace the NA emissions with linearly interpolated values
df_list <- split(
x = df_NA,
f = interaction(df_NA$hector.name, df_NA$hector.units, drop = T))
df_list
complete_hector_emissions <- lapply(df_list, function(x) {
new_vals <- na.approx(object = x$value, x = x$year)
x$value <- new_vals
return(x)
}) %>%
rbindlist
# Format the data
out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
??na.approx
get_gcam_emissions <- function(dat_file) {
# checking to make sure the data file is the right format
# make sure rgcam file exists and load it
assertthat::assert_that(file.exists(dat_file))
gcam_res <- loadProject(dat_file)
# format gcam results into a data frame
gcam_df <- gcam_res$GCAM$`all emissions by region`
# aggregate region emissions to get global totals
global_totals <- gcam_df %>%
group_by(year, ghg) %>%
summarize(value = sum(value)) %>%
ungroup()
# add emissions mapping information to the data frame
gcam_emissions_map <- merge(global_totals, emissions_map, by = "ghg", all.x = T)
setDT(gcam_emissions_map)
## from Kalyn's code -- check to make sure that the emissions being passed to Hector are
## the ones we are expecting to be passed to hector.
## We should only be expecting NAs for -- H2, H2_AWB, PM10, PM2,5
no_matches <- unique(gcam_emissions_map[is.na(gcam_emissions_map$agg.gas), ]$ghg)
expected_emissions <- c("H2", "H2_AWB", "PM10", "PM2.5", "CO2_FUG")
assertthat::assert_that(all(no_matches %in% expected_emissions), msg = "unexpected emissions not being passed to Hector.")
# We need to convert the GCAM emissions to Hector emissions (we use the merged mapping data for this ;D )
gcam_emissions_map$converted_value <- gcam_emissions_map[ , list(value * unit.conv)]
# Halocarbons can be aggregated into a single halocarbon category -- I think this line of code does that (from Kalyns code)
gcam_inputs_for_hector <- gcam_emissions_map[ , list(value = sum(converted_value)), by = c( "agg.gas", "hector.name", "year", "hector.units")]
# Drop the expected NAs
d <- na.omit(gcam_inputs_for_hector)
# Error check -- will add later
# The expected years of data we want are from 2005-2100, before 2005 Hector is using GCAM inputs
expected_years <- data.table(year = 2005:2100)
# Construct a df of all the variable for 2005-2100. This will create a df with NAs when no GCAM emissions
# are available - this data will be filled-in in the following step.
save_cols <- names(d)[!names(d) %in% c("year", "value")]
to_replicate <- distinct(d [, ..save_cols])
df_with_all_yrs <- repeat_add_columns(x = to_replicate, y = expected_years)
df_NA <- d[df_with_all_yrs, on = names(df_with_all_yrs), nomatch = NA]
df_NA
# Replace the NA emissions with linearly interpolated values
df_list <- split(
x = df_NA,
f = interaction(df_NA$hector.name, df_NA$hector.units, drop = T))
df_list
complete_hector_emissions <- lapply(df_list, function(x) {
new_vals <- zoo::na.approx(object = x$value, x = x$year)
x$value <- new_vals
return(x)
}) %>%
rbindlist
# Format the data
out <- complete_hector_emissions[, .(scenario = "GCAM", variable = hector.name, year, value, units = hector.units)]
out
}
gcam_emissions_df <- get_gcam_emissions("data/gcam_emissions.dat")
# Reshape global_totals to wide format
gcam_emissions_df_wide <- spread(gcam_emissions_df, key = ghg, value = value)
# Reshape global_totals to wide format
gcam_emissions_df_wide <- spread(gcam_emissions_df, key = variable, value = value)
View(gcam_emissions_df_wide)
